#!/usr/bin/env python3
# -*- coding: utf-8 -*-

__author__ = 'luckydonald'

from luckydonaldUtils.logger import logging
logger = logging.getLogger(__name__)
if __name__ == '__main__':
    logging.add_colored_handler(level=logging.DEBUG)
# end if

from typing import Union, List, Dict
from .models import *

# import either requests or httpx
# as internet
try:
    import requests as internet
except ImportError:
    try:
        import httpx as internet
    except ImportError:
        raise ImportError('Neither "requests" nor "httpx" could be found. Make sure either of them is installed.')
    # end try
# end try
{#
route = \
    Route(
        method='GET',
        path=UrlPath(
            original='/api/v1/json/comments/:comment_id',
            template='/api/v1/json/comments/{comment_id}',
            params=[
                Parameter(
                    name='comment_id',
                    type='Integer',
                    description='the variable comment_id part of the url.'
                )
            ]
        ),
        allowed_query_parameters=[],
        description='Fetches a **comment response** for the comment ID referenced by the `comment_id` URL parameter.',
        response_format=ResponseType(
            schema='{"comment":Comment}',
            is_list=False,
            key='comment',
            class_name='Comment'
        ),
        example_url='/api/v1/json/comments/1000'
    )
#}

class SyncBot(object):
    """
    Synchronous client for Derpibooru.org
    """
    _base_url = 'https://derpibooru.org'

    @staticmethod
    def _check_response(response: internet.Response) -> None:
        """
        Makes sure a server response looks valid,
        or raise the appropriate errors if not.

        :param response: A requests/httpx response.
        :type  response: requests.Response|httpx.Response
        """
        assert response.status_code == 200  # TODO
        assert response.headers['content-type'] == 'application/json; charset=utf-8'
    # end def

    {% for route in routes %}
    def {{ route.name }}(
        self, {#
        #}{% for param in route.path.params %}
        {{ param.name }}: {{ param.python_typing_representation() }},
        {%- endfor %}{% for param in route.allowed_query_parameters if not param.optional %}
        {{ param.name }}: {% if param.optional %}Union[{% endif %}{{ param.python_typing_representation() }}{% if param.optional %}, None] = None{% endif %},
        {%- endfor %}{% for param in route.allowed_query_parameters if param.optional %}
        {{ param.name }}: {% if param.optional %}Union[{% endif %}{{ param.python_typing_representation() }}{% if param.optional %}, None] = None{% endif %},
        {%- endfor %}
    ) -> {{ route.response_format.python_typing_representation(json_mode=False) }}:
        """
        {{ route.description }}

        A request will be sent to the following endpoint: `{{ route.path.original }}`
        It will take in account `self._base_url` and fill in all url variables and append the data parameters as needed,
        which would for example look like this: https://derpibooru.org{{ route.example_url }}

        The API should return json looking like `{{ route.response_format.schema }}` which will then be parsed to the python result `{{ route.response_format.python_typing_representation(json_mode=False) }}`.{#
        #}
        {% for param in route.path.params %}
        :param {{ param.name }}: {{ param.description | indent(width=8 + 9 + param.name.__len__()) | trim() }}
        :type  {{ param.name }}: {{ param.python_typing_representation(classes) }}{% if param.optional %}|None{% endif %}
        {% endfor %}{% for param in route.allowed_query_parameters if not param.optional %}
        :param {{ param.name }}: {{ param.description | indent(width=8 + 9 + param.name.__len__()) | trim() }}
        :type  {{ param.name }}: {{ param.python_typing_representation(classes) }}{% if param.optional %}|None{% endif %}
        {% endfor %}{% for param in route.allowed_query_parameters if param.optional %}
        :param {{ param.name }}: {{ param.description | indent(width=8 + 9 + param.name.__len__()) | trim() }}
        :type  {{ param.name }}: {{ param.python_typing_representation(classes) }}{% if param.optional %}|None{% endif %}
        {% endfor %}
        :return: The parsed result from the API.
        :rtype:  {{ route.response_format.python_typing_representation(json_mode=False) }}
        """
        pass
    # end def {{ route.name }}
    {% endfor %}
# end class
