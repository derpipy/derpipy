#!/usr/bin/env python3
# -*- coding: utf-8 -*-

__author__ = 'luckydonald'

logger = logging.getLogger(__name__)
if __name__ == '__main__':
    logging.add_colored_handler(level=logging.DEBUG)
# end if

from typing import Union, List
from .models import *

class SyncBot(object):
{% for route in routes %}
    {##{% set _route=Route(
        method='GET',
        path=UrlPath(
            original='/api/v1/json/comments/:comment_id',
            template='/api/v1/json/comments/{comment_id}',
            params=[
                Parameter(
                    name='comment_id',
                    type='Integer',
                    description='the variable comment_id part of the url.'
                )
            ]
        ),
        allowed_query_parameters=[],
        description='Fetches a **comment response** for the comment ID referenced by the `comment_id` URL parameter.',
        response_format=ResponseType(
            schema='{"comment":Comment}',
            is_list=False,
            key='comment',
            class_name='Comment'
        ),
        example_url='/api/v1/json/comments/1000'
    )
    %}{##}

    # {{ route }}

    def {{ route.name }}(
        self, {#
        #}{% for param in route.path.params %}
        {{ param.name }}: {{ param.python_typing_representation() }},
        {%- endfor %}{% for param in route.allowed_query_parameters if not param.optional %}
        {{ param.name }}: {% if param.optional %}Union[{% endif %}{{ param.python_typing_representation() }}{% if param.optional %}, None] = None{% endif %},
        {%- endfor %}{% for param in route.allowed_query_parameters if param.optional %}
        {{ param.name }}: {% if param.optional %}Union[{% endif %}{{ param.python_typing_representation() }}{% if param.optional %}, None] = None{% endif %},
    {%- endfor %}
    ) -> {{ route.response_format.python_typing_representation(json_mode=False) }}:
    """
    {{ route.description }}
    """
        pass
    # end def {{ route.name }}
{% endfor %}
