#!/usr/bin/env python3
# -*- coding: utf-8 -*-

__author__ = 'luckydonald'

from luckydonaldUtils.logger import logging
from luckydonaldUtils.exceptions import assert_type_or_raise

from typing import Union, List, Dict, Type, Any
from .models import *

{% if not is_asyncio -%}
# import either requests or httpx, whichever sync http client is available.
try:
    is_requests = True
    import requests as internet
    CLIENT_TYPE = internet.Session
except ImportError:
    is_requests = False
    try:
        import httpx as internet
    except ImportError:
        raise ImportError('Neither "requests" nor "httpx" could be found. Make sure either of them is installed.')
    # end try
    CLIENT_TYPE = internet.Client
# end try
{% else -%}
# import httpx, an async http client
import httpx as internet
{% endif %}

logger = logging.getLogger(__name__)
if __name__ == '__main__':
    logging.add_colored_handler(level=logging.DEBUG)
# end if

{#-
route = \
    Route(
        method='GET',
        path=UrlPath(
            original='/api/v1/json/comments/:comment_id',
            template='/api/v1/json/comments/{comment_id}',
            params=[
                Parameter(
                    name='comment_id',
                    type='Integer',
                    description='the variable comment_id part of the url.'
                )
            ]
        ),
        allowed_query_parameters=[],
        description='Fetches a **comment response** for the comment ID referenced by the `comment_id` URL parameter.',
        response_format=ResponseType(
            schema='{"comment":Comment}',
            is_list=False,
            key='comment',
            class_name='Comment'
        ),
        example_url='/api/v1/json/comments/1000'
    )
#}
{% for route in routes %}

{%if is_asyncio %}async {% endif %}def {{ route.name }}( {#-
    #}{% for param in route.all_parameters_ordered_generator(include_url_params=True, include_key=True) %}
    {{ param.name }}: {% if param.optional %}Union[{% endif %}{{ param.python_typing_representation() }}{% if param.optional %}, None] = None{% endif %},
    {%- endfor %}{% if is_asyncio %}
    _client: Union[None, 'DerpiClient', internet.AsyncClient] = None,{% else %}
    _client: Union[None, 'DerpiClient', (internet.Session if is_requests else internet.Client)] = None,{% endif %}
) -> {{ route.response_format.python_typing_representation(json_mode=False) }}:
    """
    {{ route.description }}

    A request will be sent to the following endpoint: `{{ route.path.original }}`
    It will take in account `self._base_url` and fill in all url variables and append the data parameters as needed,
    which would for example look like this: https://derpibooru.org{{ route.example_url }}

    The API should return json looking like `{{ route.response_format.schema }}` which will then be parsed to the python result `{{ route.response_format.python_typing_representation(json_mode=False) }}`.{#
    #}
    {% for param in route.all_parameters_ordered_generator(include_url_params=True, include_key=True) %}
    :param {{ param.name }}: {{ param.description | indent(width=8 + 7 + param.name.__len__() + 2) | trim() }}{% if param.api_name != param.name %}
    {{ " " * (7 + param.name.__len__() + 2) }}Note, on derpibooru's side this parameter is called `{{ param.api_name }}`.{% endif %}
    :type  {{ param.name }}: {{ param.python_typing_representation(classes) }}{% if param.optional %}|None{% endif %}
    {% endfor %}{% if is_asyncio %}
    :param _client: If you wanna to provide your custom `DerpiClient`, or just an already opened `httpx.AsyncClient`.
                    Example with `httpx.AsyncClient`:
                    >>> async with httpx.AsyncClient() as client:
                    ...    result = await {{ route.name }}(..., _client=client)

                    You can provide a DerpiClient instance as well, to that same variable:
                    >>> client = DerpiClient(key='...')
                    >>> client._base_url = 'https://furbooru.org'
                    >>> result = await {{ route.name }}(..., _client=client)
                    In this example we wanted to modify the base url to go to a different booru.

                    Combined example:
                    >>> async with httpx.AsyncClient() as web_client:
                    >>>    derpi_client = DerpiClient(key='...', client=web_client)
                    ...    result = await {{ route.name }}(..., _client=derpi_client)

    :type  _client: httpx.AsyncClient|DerpiClient|None
    {% else %}
    :param _client: If you wanna to provide your custom `DerpiClient` or just an already opened `requests.Session`/`httpx.Client`.
                    For example with requests:
                    >>> client = requests.Session()
                    >>> result = {{ route.name }}(..., _client=client)

                    If you use httpx instead of requests, this would be with a context manager:
                    >>> with httpx.Client() as client:
                    ...     result = {{ route.name }}(..., _client=client)

                    Or httpx and manually closing it:
                    >>> client = httpx.Client()
                    >>> try:
                    ...     result = {{ route.name }}(..., _client=client)
                    ... finally:
                    ...     client.close()

                    You can provide a DerpiClient instance as well, to that same variable:
                    >>> client = DerpiClient(key='...')
                    >>> client._base_url = 'https://furbooru.org'
                    >>> result = {{ route.name }}(..., _client=client)

    :type  _client: requests.Session|httpx.Client|DerpiClient|None
    {% endif %}
    :return: The parsed result from the API.
    :rtype:  {{ route.response_format.python_typing_representation(json_mode=False) }}
    """
    _url = DerpiClient.get_url(client=_client, path=f{{ route.path.template.__repr__() }})
    response: internet.Response = {% if is_asyncio %}await {% endif %}DerpiClient.static_request({{route.method.__repr__()}}, url=_url, client=_client{% if route.allowed_query_parameters  %}, params={{ '{' }} {#-
         #}{% for param in route.all_parameters_ordered_generator(include_url_params=False, include_key=True) %}
        {{ param.api_name.__repr__() }}: {{ param.name }},
        {%- endfor %}
    {{ '}' }}{% endif %})
    result: {{ route.response_format.python_typing_representation(json_mode=True) }} = response.json() {#-
    #}{% if route.response_format.key %}
    result: {{ route.response_format.python_typing_representation(json_mode=True, include_dict=False) }} = result[{{ route.response_format.key.__repr__() }}] {#-
    #}{% endif %}{% if route.response_format.is_list %}
    assert_type_or_raise(result, list, parameter_name='result')
    result: {{ route.response_format.python_typing_representation(json_mode=False) }} = [
        {{ route.response_format.class_name }}.from_dict(item)
        for item in result
    ] {#-
    #}{% else %}
    assert_type_or_raise(result, dict, parameter_name='result')
    result: {{ route.response_format.python_typing_representation(json_mode=False) }} = {{ route.response_format.class_name }}.from_dict(result) {#-
    #}{% endif %}
    return result
# end def {{ route.name }}
{% endfor %}

class DerpiClient(object):
    """
    Synchronous client for Derpibooru.org
    """
    DEFAULT_BASE_URL = 'https://derpibooru.org'  # default base url.

    def __init__(self, key, client: Union[None, {% if is_asyncio %}internet.AsyncClient{% else %}CLIENT_TYPE{% endif %}] = None, base_url = None):
        """
        :param key: API key
        """
        if base_url is None:
            base_url = self.DEFAULT_BASE_URL
        # end if
        self._key = key
        self._client = client
        self._base_url = base_url
    # end def

    @classmethod
    def get_url(cls, client: Union['DerpiClient', Any], path: str) -> str:
        if isinstance(client, DerpiClient):
            return client._base_url + path
        else:
            return cls.DEFAULT_BASE_URL + path
        # end if
    # end if

    @classmethod
    {%if is_asyncio %}async {% endif %}def static_request(
        cls: Type['DerpiClient'],
        method: str,
        url: str,
        params: Union[Dict, None] = None,
        client: Union[None, {%if is_asyncio %}internet.AsyncClient{% else %}CLIENT_TYPE{% endif %}, 'DerpiClient'] = None
    ) -> internet.Response:
        if isinstance(client, DerpiClient):
            client: {%if is_asyncio %}internet.AsyncClient{% else %}CLIENT_TYPE{% endif %} = client._client
        # end if
        if client is None:  # if we have no client, call ourself recursively with a with statement.
            {%if is_asyncio %}async {% endif %}with {%if is_asyncio %}internet.AsyncClient(){% else %}internet.Session() if is_requests else internet.Client(){% endif %} as client:
                return {%if is_asyncio %}await {% endif %}cls.static_request(method=method, url=url, params=params, client=client)
            # end with
        # end if
        response: {%if is_asyncio %}internet.Response{% else %}internet.Response{% endif %} = {%if is_asyncio %}await {% endif %}client.request(method=method, url=url, params=params)
        cls._check_response(response)
        return response
    # end def

    @staticmethod
    def _check_response(response: internet.Response) -> None:
        """
        Makes sure a server response looks valid,
        or raise the appropriate errors if not.

        :param response: A requests/httpx response.
        :type  response: requests.Response|httpx.Response
        """
        assert response.status_code == 200  # TODO
        assert response.headers['content-type'] == 'application/json; charset=utf-8'
    # end def{#
#}
    {% for route in routes %}
    # noinspection PyMethodMayBeStatic
    {% if is_asyncio %}async {% endif %}def {{ route.name }}(
        self, {#
        #}{% for param in route.all_parameters_ordered_generator(include_url_params=True, include_key=False) %}
        {{ param.name }}: {% if param.optional %}Union[{% endif %}{{ param.python_typing_representation() }}{% if param.optional %}, None] = None{% endif %},
        {%- endfor %}
        _client: Union[None, {% if is_asyncio %}internet.AsyncClient{% else %}(internet.Session if is_requests else internet.Client){% endif %}] = None,
    ) -> {{ route.response_format.python_typing_representation(json_mode=False) }}:
        """
        {{ route.description }}

        A request will be sent to the following endpoint: `{{ route.path.original }}`
        It will take in account `self._base_url` and fill in all url variables and append the data parameters as needed,
        which would for example look like this: https://derpibooru.org{{ route.example_url }}

        The API should return json looking like `{{ route.response_format.schema }}` which will then be parsed to the python result `{{ route.response_format.python_typing_representation(json_mode=False) }}`.{#
        #}
        {% for param in route.all_parameters_ordered_generator(include_url_params=True, include_key=True) %}
        :param {{ param.name }}: {{ param.description | indent(width=8 + 9 + param.name.__len__()) | trim() }}
        :type  {{ param.name }}: {{ param.python_typing_representation(classes) }}{% if param.optional %}|None{% endif %}
        {% endfor %}{% if is_asyncio %}
        :param _client: If you wanna to provide your custom, already opened httpx.AsyncClient.
                        For example:
                        >>> async with httpx.AsyncClient() as client:
                        ...    result = await {{ route.name }}(..., _client=client)

        :type  _client: httpx.AsyncClient|None
        {% else %}
        :param _client: If you wanna to provide your custom, already opened requests.Session/httpx.Client.
                        For example with requests:
                        >>> client = requests.Session()
                        >>> result = {{ route.name }}(..., _client=client)

                        If you use httpx instead of requests, this would be with a context manager:
                        >>> with httpx.Client() as client:
                        ...     result = {{ route.name }}(..., _client=client)

                        Or httpx and manually closing it:
                        >>> client = httpx.Client()
                        >>> try:
                        ...     result = {{ route.name }}(..., _client=client)
                        ... finally:
                        ...     client.close()


        :type  _client: requests.Session|httpx.Client|None
        {% endif %}
        :return: The parsed result from the API.
        :rtype:  {{ route.response_format.python_typing_representation(json_mode=False) }}
        """
        return {%if is_asyncio %}await {% endif %}{{ route.name }}( {#-
            #}{% for param in route.all_parameters_ordered_generator(include_url_params=True, include_key=True) %}{% if param.name != 'key' %}
            {{ param.name }}={{ param.name }},
            {%- else %}
            {{ param.name }}=self._key,
            {%- endif %}{%- endfor %}
            _client=_client if _client else self._client,
        )
    # end def {{ route.name }}
    {% endfor %}
# end class
