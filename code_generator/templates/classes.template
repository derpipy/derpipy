#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from __future__ import annotations
import iso8601

from datetime import datetime
from typing import Union, List, Dict, Type

from luckydonaldUtils.logger import logging
from luckydonaldUtils.typing import JSONType
from luckydonaldUtils.exceptions import assert_type_or_raise


__author__ = 'luckydonald'
__all__ = ['DerpiModel', {% for class in classes %}{{ class.name.__repr__() }}{% if not loop.last %}, {% endif -%}{% endfor %}]

logger = logging.getLogger(__name__)
if __name__ == '__main__':
    logging.add_colored_handler(level=logging.DEBUG)
# end if


{# #{% set class = Class(
    name='Awards',
    params=[
        Parameter(
            name='image_url',
            type='String',
            description='The URL of this award.',
            optional=False
        ),
        Parameter(
            name='title',
            type='String',
            description='The title of this award.',
            optional=False
        ),
        Parameter(
            name='id',
            type='Integer',
            description='The ID of the badge this award is derived from.',
            optional=False
        ),
        Parameter(
            name='label',
            type='String',
            description='The label of this award.',
            optional=False
        ),
        Parameter(
            name='awarded_on',
            type='RFC3339 datetime',
            description='The time, in UTC, when this award was given.',
            optional=False
        )
    ]
) %}{# -#}


class DerpiModel(object):
    """ Base class for all models """

    @classmethod
    def prepare_dict(cls: Type[DerpiModel], data: Union[Dict[str, JSONType]]) -> Dict[str, JSONType]:
        """
        Builds a new dict with valid values for the DerpiModel constructor.

        :return: new dict with valid values
        :rtype: dict
        """
        return {}
    # end def prepare_dict
# end class DerpiModel

{% for class in classes %}
class {{ class.name }}(DerpiModel):
    """
    A parsed {{ class.name }} response of the Derpibooru API.
    Yes, a better description should be here.

    {% for param in class.params %}
    :param {{ param.name }}: {{ param.description }}
    :type  {{ param.name }}: {{ param.python_typing_representation(classes) }}{% if param.optional %}|None{% endif %}
    {% endfor %}
    """

    {% for param in class.params %}
    """ {{ param.description }} """
    {{ param.name }}: {% if param.optional %}Union[{% endif %}{{ param.python_typing_representation(classes) }}{% if param.optional %}, None]{% endif %}
    {% endfor %}
    def __init__(
        self, {#
        #}{% for param in class.params %}
        {{ param.name }}: {% if param.optional %}Union[{% endif %}{{ param.python_typing_representation(classes) }}{% if param.optional %}, None] = None{% endif %},
    {%- endfor %}
    ):
        """
        A parsed {{ class.name }} response of the Derpibooru API.
        Yes, a better description should be here.

        {% for param in class.params %}
        :param {{ param.name }}: {{ param.description }}
        :type  {{ param.name }}: {{ param.python_typing_representation(classes) }}{% if param.optional %}|None{% endif %}
        {% endfor %}
        """
        {%- for param in class.params %}
        self.{{ param.name }} = {{ param.name }}
        {%- endfor %}
    # end def __init__

    @classmethod
    def prepare_dict(cls: Type[{{ class.name }}], data: Union[Dict[str, JSONType]]) -> Dict[str, JSONType]:
        """
        Builds a new dict with valid values for the {{ class.name }} constructor.

        :return: new dict with valid values
        :rtype: dict
        """
        assert_type_or_raise(data, dict, parameter_name="array")

        arguments = super().prepare_dict(data) {# -
        #}{% for param in class.params %}{% if param.type == 'RFC3339 datetime' %}
        arguments[{{ param.name.__repr__() }}] = iso8601.parse_date(data[{{ param.name.__repr__() }}]) {#-
        #}{% else %}
        arguments[{{ param.name.__repr__() }}] = data[{{ param.name.__repr__() }}] {#-
        #}{% endif %}{% endfor %}{#
        #}
        return arguments
    # end def validate_dict

    @classmethod
    def from_dict(cls: Type[{{ class.name }}], data: Union[Dict, None]) -> Union[{{ class.name }}, None]:
        """
        Deserialize a new {{ class.name }} from a given dictionary.

        :return: new {{ class.name }} instance.
        :rtype: {{ class.name }}|None
        """
        if not data:  # None or {}
            return None
        # end if

        data: Dict = cls.prepare_dict(data)
        instance: {{ class.name }} = cls(**data)
        instance._raw = data
        return instance
    # end def from_dict

    def __str__(self):
        """
        Implements `str({{ class.name|lower }}_instance)`
        """
        return "{{ '{' }}s.__class__.__name__{{ '}' }}({% for param in class.params %}{{ param.name }}={{ '{' }}s.{{ param.name }}!r{{ '}' }}{% if not loop.last %}, {% endif %}{% endfor %})".format(s=self)
    # end def __str__

    def __repr__(self):
        """
        Implements `repr({{ class.name|lower }}_instance)`
        """
        if hasattr(self, '_raw') and self._raw:
            return "{{ '{' }}s.__class__.__name__{{ '}' }}.from_dict({s._raw})".format(s=self)
        # end if
        return "{{ '{' }}s.__class__.__name__{{ '}' }}({% for param in class.params %}{{ param.name }}={{ '{' }}s.{{ param.name }}!r{{ '}' }}{% if not loop.last %}, {% endif %}{% endfor %})".format(s=self)
    # end def __repr__

    def __eq__(self, other):
        """
        Implements equality check, i.e. `{{ class.name|lower }}_instance_a == {{ class.name|lower }}_instance_b`
        """
        return {% for param in class.params %}self.{{ param.name }} == other.{{ param.name }}{% if not loop.last %} and {% endif %}{% endfor %}
    # end __eq__
# end class

{% endfor %}
