from models import *

routes = [
	Route(name='comment', method='GET', path=UrlPath(original='/api/v1/json/comments/:comment_id', template='/api/v1/json/comments/{comment_id}', params=[Parameter(name='comment_id', type='Integer', description='the variable comment_id part of the url.', optional=False, api_name='comment_id')]), allowed_query_parameters=[], description='Fetches a **comment response** for the comment ID referenced by the `comment_id` URL parameter.', response_format=ResponseType(schema='{"comment":Comment}', is_list=False, key='comment', class_name='Comment', has_total=False), example_url='/api/v1/json/comments/1000'),
	Route(name='image', method='GET', path=UrlPath(original='/api/v1/json/images/:image_id', template='/api/v1/json/images/{image_id}', params=[Parameter(name='image_id', type='Integer', description='the variable image_id part of the url.', optional=False, api_name='image_id')]), allowed_query_parameters=[Parameter(name='key', type='String', description='An optional authentication token. If omitted, no user will be authenticated.\n\nYou can find your authentication token in your [account settings](https://derpibooru.org/registration/edit).', optional=True, api_name='key'), Parameter(name='filter_id', type='Integer', description='Assuming the user can access the filter ID given by the parameter, overrides the current filter for this request. This is primarily useful for unauthenticated API access.', optional=True, api_name='filter_id')], description='Fetches an **image response** for the image ID referenced by the `image_id` URL parameter.', response_format=ResponseType(schema='{"image":Image}', is_list=False, key='image', class_name='Image', has_total=False), example_url='/api/v1/json/images/1'),
	Route(name='image_upload', method='POST', path=UrlPath(original='/api/v1/json/images', template='/api/v1/json/images', params=[]), allowed_query_parameters=[Parameter(name='key', type='String', description='An optional authentication token. If omitted, no user will be authenticated.\n\nYou can find your authentication token in your [account settings](https://derpibooru.org/registration/edit).', optional=True, api_name='key'), Parameter(name='url', type='String', description='Link a deviantART page, a Tumblr post, or the image directly.', optional=False, api_name='url')], description='Submits a new image. Both `key` and `url` are required. Errors will result in an `{"errors":image-errors-response}`.', response_format=ResponseType(schema='{"image":Image}', is_list=False, key='image', class_name='Image', has_total=False), example_url='#posting-images'),
	Route(name='featured_image', method='GET', path=UrlPath(original='/api/v1/json/images/featured', template='/api/v1/json/images/featured', params=[]), allowed_query_parameters=[], description='Fetches an **image response** for the for the current featured image.', response_format=ResponseType(schema='{"image":Image}', is_list=False, key='image', class_name='Image', has_total=False), example_url='/api/v1/json/images/featured'),
	Route(name='tag', method='GET', path=UrlPath(original='/api/v1/json/tags/:tag_id', template='/api/v1/json/tags/{tag_id}', params=[Parameter(name='tag_id', type='String', description='the variable tag_id part of the url.', optional=False, api_name='tag_id')]), allowed_query_parameters=[], description="Fetches a **tag response** for the **tag slug** given by the `tag_id` URL parameter. The tag's ID is **not** used. For getting a tag by ID the search endpoint can be used like `search/tags?q=id:4458`.", response_format=ResponseType(schema='{"tag":Tag}', is_list=False, key='tag', class_name='Tag', has_total=False), example_url='/api/v1/json/tags/artist-colon-atryl'),
	Route(name='post', method='GET', path=UrlPath(original='/api/v1/json/posts/:post_id', template='/api/v1/json/posts/{post_id}', params=[Parameter(name='post_id', type='Integer', description='the variable post_id part of the url.', optional=False, api_name='post_id')]), allowed_query_parameters=[], description='Fetches a **post response** for the post ID given by the `post_id` URL parameter.', response_format=ResponseType(schema='{"post":Post}', is_list=False, key='post', class_name='Post', has_total=False), example_url='/api/v1/json/posts/2730144'),
	Route(name='user', method='GET', path=UrlPath(original='/api/v1/json/profiles/:user_id', template='/api/v1/json/profiles/{user_id}', params=[Parameter(name='user_id', type='Integer', description='the variable user_id part of the url.', optional=False, api_name='user_id')]), allowed_query_parameters=[], description='Fetches a **profile response** for the user ID given by the `user_id` URL parameter.', response_format=ResponseType(schema='{"user":User}', is_list=False, key='user', class_name='User', has_total=False), example_url='/api/v1/json/profiles/216494'),
	Route(name='filter', method='GET', path=UrlPath(original='/api/v1/json/filters/:filter_id', template='/api/v1/json/filters/{filter_id}', params=[Parameter(name='filter_id', type='Integer', description='the variable filter_id part of the url.', optional=False, api_name='filter_id')]), allowed_query_parameters=[Parameter(name='key', type='String', description='An optional authentication token. If omitted, no user will be authenticated.\n\nYou can find your authentication token in your [account settings](https://derpibooru.org/registration/edit).', optional=True, api_name='key')], description='Fetches a **filter response** for the filter ID given by the `filter_id` URL parameter.', response_format=ResponseType(schema='{"filter":Filter}', is_list=False, key='filter', class_name='Filter', has_total=False), example_url='/api/v1/json/filters/56027'),
	Route(name='system_filters', method='GET', path=UrlPath(original='/api/v1/json/filters/system', template='/api/v1/json/filters/system', params=[]), allowed_query_parameters=[Parameter(name='page', type='Integer', description='Controls the current page of the response, if the response is paginated. Empty values default to the first page. The first page is `1`.', optional=True, api_name='page')], description='Fetches a list of **filter responses** that are flagged as being **system** filters (and thus usable by anyone).', response_format=ResponseType(schema='{"filters":[Filter]}', is_list=True, key='filters', class_name='Filter', has_total=False), example_url='/api/v1/json/filters/system'),
	Route(name='user_filters', method='GET', path=UrlPath(original='/api/v1/json/filters/user', template='/api/v1/json/filters/user', params=[]), allowed_query_parameters=[Parameter(name='key', type='String', description='An optional authentication token. If omitted, no user will be authenticated.\n\nYou can find your authentication token in your [account settings](https://derpibooru.org/registration/edit).', optional=False, api_name='key'), Parameter(name='page', type='Integer', description='Controls the current page of the response, if the response is paginated. Empty values default to the first page. The first page is `1`.', optional=True, api_name='page')], description='Fetches a list of **filter responses** that belong to the user given by **key**. If no **key** is given or it is invalid, will return a **403 Forbidden** error.', response_format=ResponseType(schema='{"filters":[Filter]}', is_list=True, key='filters', class_name='Filter', has_total=False), example_url='/api/v1/json/filters/user'),
	Route(name='oembed', method='GET', path=UrlPath(original='/api/v1/json/oembed', template='/api/v1/json/oembed', params=[]), allowed_query_parameters=[Parameter(name='url', type='String', description='Link a deviantART page, a Tumblr post, or the image directly.', optional=False, api_name='url')], description='Fetches an **oEmbed response** for the given app link or CDN URL.', response_format=ResponseType(schema='Oembed', is_list=False, key=None, class_name='Oembed', has_total=False), example_url='/api/v1/json/oembed?url=https://derpicdn.net/img/2012/1/2/3/full.png'),
	Route(name='search_comments', method='GET', path=UrlPath(original='/api/v1/json/search/comments', template='/api/v1/json/search/comments', params=[]), allowed_query_parameters=[Parameter(name='key', type='String', description='An optional authentication token. If omitted, no user will be authenticated.\n\nYou can find your authentication token in your [account settings](https://derpibooru.org/registration/edit).', optional=True, api_name='key'), Parameter(name='page', type='Integer', description='Controls the current page of the response, if the response is paginated. Empty values default to the first page. The first page is `1`.', optional=True, api_name='page'), Parameter(name='query', type='String', description='The current search query, if the request is a search request.', optional=False, api_name='q')], description='Executes the search given by the `q` query parameter (case insensitive and stemming is applied. If you search for **best pony** results like **Best Ponies** are also be returned), and returns **comment responses** sorted by descending creation time.', response_format=ResponseType(schema='{"comments":[Comment]}', is_list=True, key='comments', class_name='Comment', has_total=False), example_url='/api/v1/json/search/comments?q=image_id:1000000'),
	Route(name='search_galleries', method='GET', path=UrlPath(original='/api/v1/json/search/galleries', template='/api/v1/json/search/galleries', params=[]), allowed_query_parameters=[Parameter(name='key', type='String', description='An optional authentication token. If omitted, no user will be authenticated.\n\nYou can find your authentication token in your [account settings](https://derpibooru.org/registration/edit).', optional=True, api_name='key'), Parameter(name='page', type='Integer', description='Controls the current page of the response, if the response is paginated. Empty values default to the first page. The first page is `1`.', optional=True, api_name='page'), Parameter(name='query', type='String', description='The current search query, if the request is a search request.', optional=False, api_name='q')], description='Executes the search given by the `q` query parameter, and returns **gallery responses** sorted by descending creation time.', response_format=ResponseType(schema='{"galleries":[Gallery]}', is_list=True, key='galleries', class_name='Gallery', has_total=False), example_url='/api/v1/json/search/galleries?q=title:mean*'),
	Route(name='search_posts', method='GET', path=UrlPath(original='/api/v1/json/search/posts', template='/api/v1/json/search/posts', params=[]), allowed_query_parameters=[Parameter(name='key', type='String', description='An optional authentication token. If omitted, no user will be authenticated.\n\nYou can find your authentication token in your [account settings](https://derpibooru.org/registration/edit).', optional=True, api_name='key'), Parameter(name='page', type='Integer', description='Controls the current page of the response, if the response is paginated. Empty values default to the first page. The first page is `1`.', optional=True, api_name='page'), Parameter(name='query', type='String', description='The current search query, if the request is a search request.', optional=False, api_name='q')], description='Executes the search given by the `q` query parameter, and returns **post responses** sorted by descending creation time.', response_format=ResponseType(schema='{"posts":[Post]}', is_list=True, key='posts', class_name='Post', has_total=False), example_url='/api/v1/json/search/posts?q=subject:time wasting thread'),
	Route(name='search_images', method='GET', path=UrlPath(original='/api/v1/json/search/images', template='/api/v1/json/search/images', params=[]), allowed_query_parameters=[Parameter(name='key', type='String', description='An optional authentication token. If omitted, no user will be authenticated.\n\nYou can find your authentication token in your [account settings](https://derpibooru.org/registration/edit).', optional=True, api_name='key'), Parameter(name='filter_id', type='Integer', description='Assuming the user can access the filter ID given by the parameter, overrides the current filter for this request. This is primarily useful for unauthenticated API access.', optional=True, api_name='filter_id'), Parameter(name='page', type='Integer', description='Controls the current page of the response, if the response is paginated. Empty values default to the first page. The first page is `1`.', optional=True, api_name='page'), Parameter(name='per_page', type='Integer', description='Controls the number of results per page, up to a limit of 50, if the response is paginated. The default is 25.', optional=True, api_name='per_page'), Parameter(name='query', type='String', description='The current search query, if the request is a search request.', optional=False, api_name='q'), Parameter(name='sort_direction', type='String', description='The current sort direction, if the request is a search request.', optional=True, api_name='sd'), Parameter(name='sort_field', type='String', description='The current sort field, if the request is a search request.', optional=True, api_name='sf')], description='Executes the search given by the `q` query parameter, and returns **image responses**.', response_format=ResponseType(schema='{"images":[Image]}', is_list=True, key='images', class_name='Image', has_total=False), example_url='/api/v1/json/search/images?q=safe'),
	Route(name='search_tags', method='GET', path=UrlPath(original='/api/v1/json/search/tags', template='/api/v1/json/search/tags', params=[]), allowed_query_parameters=[Parameter(name='page', type='Integer', description='Controls the current page of the response, if the response is paginated. Empty values default to the first page. The first page is `1`.', optional=True, api_name='page'), Parameter(name='query', type='String', description='The current search query, if the request is a search request.', optional=False, api_name='q')], description='Executes the search given by the `q` query parameter, and returns **tag responses** sorted by descending image count.', response_format=ResponseType(schema='{"tags":[Tag]}', is_list=True, key='tags', class_name='Tag', has_total=False), example_url='/api/v1/json/search/tags?q=analyzed_name:wing'),
	Route(name='search_reverse', method='POST', path=UrlPath(original='/api/v1/json/search/reverse', template='/api/v1/json/search/reverse', params=[]), allowed_query_parameters=[Parameter(name='key', type='String', description='An optional authentication token. If omitted, no user will be authenticated.\n\nYou can find your authentication token in your [account settings](https://derpibooru.org/registration/edit).', optional=True, api_name='key'), Parameter(name='url', type='String', description='Link a deviantART page, a Tumblr post, or the image directly.', optional=False, api_name='url'), Parameter(name='distance', type='Float', description='Match distance (suggested values: between 0.2 and 0.5).', optional=True, api_name='distance')], description='Returns **image responses** based on the results of reverse-searching the image given by the `url` query parameter.', response_format=ResponseType(schema='{"images":[Image]}', is_list=True, key='images', class_name='Image', has_total=False), example_url='/api/v1/json/search/reverse?url=https://derpicdn.net/img/2019/12/24/2228439/full.jpg'),
	Route(name='forums', method='GET', path=UrlPath(original='/api/v1/json/forums', template='/api/v1/json/forums', params=[]), allowed_query_parameters=[], description='Fetches a list of **forum responses**.', response_format=ResponseType(schema='{"forums":[Forum]}', is_list=True, key='forums', class_name='Forum', has_total=False), example_url='/api/v1/json/forums'),
	Route(name='forum', method='GET', path=UrlPath(original='/api/v1/json/forums/:short_name', template='/api/v1/json/forums/{short_name}', params=[Parameter(name='short_name', type='String', description='the variable short_name part of the url.', optional=False, api_name='short_name')]), allowed_query_parameters=[], description='Fetches a **forum response** for the abbreviated name given by the `short_name` URL parameter.', response_format=ResponseType(schema='{"forum":Forum}', is_list=False, key='forum', class_name='Forum', has_total=False), example_url='/api/v1/json/forums/dis'),
	Route(name='forum_topics', method='GET', path=UrlPath(original='/api/v1/json/forums/:short_name/topics', template='/api/v1/json/forums/{short_name}/topics', params=[Parameter(name='short_name', type='String', description='the variable short_name part of the url.', optional=False, api_name='short_name')]), allowed_query_parameters=[Parameter(name='page', type='Integer', description='Controls the current page of the response, if the response is paginated. Empty values default to the first page. The first page is `1`.', optional=True, api_name='page')], description='Fetches a list of **topic responses** for the abbreviated forum name given by the `short_name` URL parameter.', response_format=ResponseType(schema='{"topics":[Topic]}', is_list=True, key='topics', class_name='Topic', has_total=False), example_url='/api/v1/json/forums/dis/topics'),
	Route(name='forum_topic', method='GET', path=UrlPath(original='/api/v1/json/forums/:short_name/topics/:topic_slug', template='/api/v1/json/forums/{short_name}/topics/{topic_slug}', params=[Parameter(name='short_name', type='String', description='the variable short_name part of the url.', optional=False, api_name='short_name'), Parameter(name='topic_slug', type='String', description='the variable topic_slug part of the url.', optional=False, api_name='topic_slug')]), allowed_query_parameters=[], description='Fetches a **topic response** for the abbreviated forum name given by the `short_name` and topic given by `topic_slug` URL parameters.', response_format=ResponseType(schema='{"topic":Topic}', is_list=False, key='topic', class_name='Topic', has_total=False), example_url='/api/v1/json/forums/dis/topics/ask-the-mods-anything'),
	Route(name='forum_posts', method='GET', path=UrlPath(original='/api/v1/json/forums/:short_name/topics/:topic_slug/posts', template='/api/v1/json/forums/{short_name}/topics/{topic_slug}/posts', params=[Parameter(name='short_name', type='String', description='the variable short_name part of the url.', optional=False, api_name='short_name'), Parameter(name='topic_slug', type='String', description='the variable topic_slug part of the url.', optional=False, api_name='topic_slug')]), allowed_query_parameters=[Parameter(name='page', type='Integer', description='Controls the current page of the response, if the response is paginated. Empty values default to the first page. The first page is `1`.', optional=True, api_name='page')], description='Fetches a list of **post responses** for the abbreviated forum name given by the `short_name` and topic given by `topic_slug` URL parameters.', response_format=ResponseType(schema='{"posts":[Post]}', is_list=True, key='posts', class_name='Post', has_total=False), example_url='/api/v1/json/forums/dis/topics/ask-the-mods-anything/posts'),
	Route(name='forum_post', method='GET', path=UrlPath(original='/api/v1/json/forums/:short_name/topics/:topic_slug/posts/:post_id', template='/api/v1/json/forums/{short_name}/topics/{topic_slug}/posts/{post_id}', params=[Parameter(name='short_name', type='String', description='the variable short_name part of the url.', optional=False, api_name='short_name'), Parameter(name='topic_slug', type='String', description='the variable topic_slug part of the url.', optional=False, api_name='topic_slug'), Parameter(name='post_id', type='Integer', description='the variable post_id part of the url.', optional=False, api_name='post_id')]), allowed_query_parameters=[], description='Fetches a **post response** for the abbreviated forum name given by the `short_name`, topic given by `topic_slug` and post given by `post_id` URL parameters.', response_format=ResponseType(schema='{"post":Post}', is_list=False, key='post', class_name='Post', has_total=False), example_url='/api/v1/json/forums/dis/topics/ask-the-mods-anything/posts/2761095'),
]
classes = [
	Class(name='SearchResult', params=[Parameter(name='hits', type='List[T]', description='List of results', optional=False, api_name='hits'), Parameter(name='total', type='Integer', description='Total amount of results, e.g. for pagination.', optional=False, api_name='total')]),
	Class(name='Image', params=[Parameter(name='aspect_ratio', type='Float', description="The image's width divided by its height.", optional=False, api_name='aspect_ratio'), Parameter(name='comment_count', type='Integer', description='The number of comments made on the image.', optional=False, api_name='comment_count'), Parameter(name='created_at', type='RFC3339 datetime', description='The creation time, in UTC, of the image.', optional=False, api_name='created_at'), Parameter(name='deletion_reason', type='String', description='The hide reason for the image, or `null` if none provided. This will only have a value on images which are deleted for a rule violation.', optional=True, api_name='deletion_reason'), Parameter(name='description', type='String', description="The image's description.", optional=False, api_name='description'), Parameter(name='downvotes', type='Integer', description='The number of downvotes the image has.', optional=False, api_name='downvotes'), Parameter(name='duplicate_of', type='Integer', description='The ID of the target image, or `null` if none provided. This will only have a value on images which are merged into another image.', optional=True, api_name='duplicate_of'), Parameter(name='faves', type='Integer', description='The number of faves the image has.', optional=False, api_name='faves'), Parameter(name='first_seen_at', type='RFC3339 datetime', description='The time, in UTC, this image was first seen (before any duplicate merging).', optional=False, api_name='first_seen_at'), Parameter(name='format', type='String', description='The file extension of this image. One of `"gif", "jpg", "jpeg", "png", "svg", "webm"`.', optional=False, api_name='format'), Parameter(name='height', type='Integer', description="The image's height, in pixels.", optional=False, api_name='height'), Parameter(name='hidden_from_users', type='Boolean', description='Whether this image is hidden. An image is hidden if it is merged or deleted for a rule violation.', optional=False, api_name='hidden_from_users'), Parameter(name='id', type='Integer', description="The image's ID.", optional=False, api_name='id'), Parameter(name='intensities', type='Intensities', description='Optional object of [internal image intensity data](https://derpibooru.orghttps://github.com/derpibooru/cli_intensities) for deduplication purposes. May be `null` if intensities have not yet been generated.', optional=True, api_name='intensities'), Parameter(name='mime_type', type='String', description='The MIME type of this image. One of `"image/gif", "image/jpeg", "image/png", "image/svg+xml", "video/webm"`.', optional=False, api_name='mime_type'), Parameter(name='name', type='String', description='The filename that this image was uploaded with.', optional=False, api_name='name'), Parameter(name='orig_sha512_hash', type='String', description='The SHA512 hash of this image as it was originally uploaded.', optional=False, api_name='orig_sha512_hash'), Parameter(name='processed', type='Boolean', description='Whether the image has finished optimization.', optional=False, api_name='processed'), Parameter(name='representations', type='Representations', description='A mapping of representation names to their respective URLs. Contains the keys `"full", "large", "medium", "small", "tall", "thumb", "thumb_small", "thumb_tiny"`.', optional=False, api_name='representations'), Parameter(name='score', type='Integer', description="The image's number of upvotes minus the image's number of downvotes.", optional=False, api_name='score'), Parameter(name='sha512_hash', type='String', description='The SHA512 hash of this image after it has been processed.', optional=False, api_name='sha512_hash'), Parameter(name='source_url', type='String', description='The current source URL of the image.', optional=False, api_name='source_url'), Parameter(name='spoilered', type='Boolean', description='Whether this image is hit by the current filter.', optional=False, api_name='spoilered'), Parameter(name='tag_count', type='Integer', description='The number of tags present on this image.', optional=False, api_name='tag_count'), Parameter(name='tag_ids', type='Array', description='A list of tag IDs this image contains.', optional=False, api_name='tag_ids'), Parameter(name='tags', type='Array', description='A list of tag names this image contains.', optional=False, api_name='tags'), Parameter(name='thumbnails_generated', type='Boolean', description='Whether this image has finished thumbnail generation. Do not attempt to load images from `view_url` or `representations` if this is false.', optional=False, api_name='thumbnails_generated'), Parameter(name='updated_at', type='RFC3339 datetime', description='The time, in UTC, the image was last updated.', optional=False, api_name='updated_at'), Parameter(name='uploader', type='String', description="The image's uploader.", optional=False, api_name='uploader'), Parameter(name='uploader_id', type='Integer', description="The ID of the image's uploader. `null` if uploaded anonymously.", optional=True, api_name='uploader_id'), Parameter(name='upvotes', type='Integer', description="The image's number of upvotes.", optional=False, api_name='upvotes'), Parameter(name='view_url', type='String', description="The image's view URL, including tags.", optional=False, api_name='view_url'), Parameter(name='width', type='Integer', description="The image's width, in pixels.", optional=False, api_name='width'), Parameter(name='wilson_score', type='Float', description='The lower bound of the [Wilson score interval](https://derpibooru.orghttps://en.wikipedia.org/wiki/Binomial_proportion_confidence_interval#Wilson_score_interval) for the image, based on its upvotes and downvotes, given a z-score corresponding to a confidence of 99.5%.', optional=False, api_name='wilson_score'), Parameter(name='size', type='Integer', description="The image's file size in bytes.", optional=False, api_name='size'), Parameter(name='animated', type='Boolean', description='Whether this image is animated.', optional=False, api_name='animated'), Parameter(name='duration', type='Float', description="Length of the animation. (Seems to always be set to `0.04` for images which aren't animated).", optional=False, api_name='duration')]),
	Class(name='Representations', params=[Parameter(name='full', type='String', description='The url to the image in original resolution.', optional=False, api_name='full'), Parameter(name='large', type='String', description='The url to the image in large resolution.', optional=False, api_name='large'), Parameter(name='medium', type='String', description='The url to the image in medium resolution.', optional=False, api_name='medium'), Parameter(name='small', type='String', description='The url to the image in small resolution.', optional=False, api_name='small'), Parameter(name='tall', type='String', description='The url to the image in tall resolution.', optional=False, api_name='tall'), Parameter(name='thumb', type='String', description='The url to the image thumbnail in normal resolution.', optional=False, api_name='thumb'), Parameter(name='thumb_small', type='String', description='The url to the image thumbnail in small resolution.', optional=False, api_name='thumb_small'), Parameter(name='thumb_tiny', type='String', description='The url to the image thumbnail in tiny resolution.', optional=False, api_name='thumb_tiny'), Parameter(name='mp4', type='String', description='Optional. The url to the animated image as mp4 format.', optional=True, api_name='mp4'), Parameter(name='webm', type='String', description='Optional. The url to the animated image as webm format.', optional=True, api_name='webm')]),
	Class(name='Intensities', params=[Parameter(name='ne', type='Float', description='Northeast intensity. Whatever that means…', optional=False, api_name='ne'), Parameter(name='nw', type='Float', description='Northwest intensity. Whatever that means…', optional=False, api_name='nw'), Parameter(name='se', type='Float', description='Southeast intensity. Whatever that means…', optional=False, api_name='se'), Parameter(name='sw', type='Float', description='Southwest intensity. Whatever that means…', optional=False, api_name='sw')]),
	Class(name='Comment', params=[Parameter(name='author', type='String', description="The comment's author.", optional=False, api_name='author'), Parameter(name='avatar', type='String', description="The URL of the author's avatar. May be a link to the CDN path, or a `data:` URI.", optional=False, api_name='avatar'), Parameter(name='body', type='String', description='The comment text.', optional=False, api_name='body'), Parameter(name='created_at', type='RFC3339 datetime', description='The creation time, in UTC, of the comment.', optional=False, api_name='created_at'), Parameter(name='edit_reason', type='String', description='The edit reason for this comment, or `null` if none provided.', optional=True, api_name='edit_reason'), Parameter(name='edited_at', type='RFC3339 datetime', description='The time, in UTC, this comment was last edited at, or `null` if it was not edited.', optional=True, api_name='edited_at'), Parameter(name='id', type='Integer', description="The comment's ID.", optional=False, api_name='id'), Parameter(name='image_id', type='Integer', description='The ID of the image the comment belongs to.', optional=False, api_name='image_id'), Parameter(name='updated_at', type='RFC3339 datetime', description='The time, in UTC, the comment was last updated at.', optional=False, api_name='updated_at'), Parameter(name='user_id', type='Integer', description='The ID of the user the comment belongs to, if any.', optional=False, api_name='user_id')]),
	Class(name='Forum', params=[Parameter(name='name', type='String', description="The forum's name.", optional=False, api_name='name'), Parameter(name='short_name', type='String', description="The forum's short name (used to identify it).", optional=False, api_name='short_name'), Parameter(name='description', type='String', description="The forum's description.", optional=False, api_name='description'), Parameter(name='topic_count', type='Integer', description='The amount of topics in the forum.', optional=False, api_name='topic_count'), Parameter(name='post_count', type='Integer', description='The amount of posts in the forum.', optional=False, api_name='post_count')]),
	Class(name='Topic', params=[Parameter(name='slug', type='String', description="The topic's slug (used to identify it).", optional=False, api_name='slug'), Parameter(name='title', type='String', description="The topic's title.", optional=False, api_name='title'), Parameter(name='post_count', type='Integer', description='The amount of posts in the topic.', optional=False, api_name='post_count'), Parameter(name='view_count', type='Integer', description='The amount of views the topic has received.', optional=False, api_name='view_count'), Parameter(name='sticky', type='Boolean', description='Whether the topic is sticky.', optional=False, api_name='sticky'), Parameter(name='last_replied_to_at', type='RFC3339 datetime', description='The time, in UTC, when the last reply was made.', optional=False, api_name='last_replied_to_at'), Parameter(name='locked', type='Boolean', description='Whether the topic is locked.', optional=False, api_name='locked'), Parameter(name='user_id', type='Integer', description='The ID of the user who made the topic. `null` if posted anonymously.', optional=True, api_name='user_id'), Parameter(name='author', type='String', description='The name of the user who made the topic.', optional=False, api_name='author')]),
	Class(name='Post', params=[Parameter(name='author', type='String', description="The post's author.", optional=False, api_name='author'), Parameter(name='avatar', type='String', description="The URL of the author's avatar. May be a link to the CDN path, or a `data:` URI.", optional=False, api_name='avatar'), Parameter(name='body', type='String', description='The post text.', optional=False, api_name='body'), Parameter(name='created_at', type='RFC3339 datetime', description='The creation time, in UTC, of the post.', optional=False, api_name='created_at'), Parameter(name='edit_reason', type='String', description='The edit reason for this post.', optional=False, api_name='edit_reason'), Parameter(name='edited_at', type='RFC3339 datetime', description='The time, in UTC, this post was last edited at, or `null` if it was not edited.', optional=True, api_name='edited_at'), Parameter(name='id', type='Integer', description="The post's ID (used to identify it).", optional=False, api_name='id'), Parameter(name='updated_at', type='RFC3339 datetime', description='The time, in UTC, the post was last updated at.', optional=False, api_name='updated_at'), Parameter(name='user_id', type='Integer', description='The ID of the user the post belongs to, if any.', optional=False, api_name='user_id')]),
	Class(name='Tag', params=[Parameter(name='aliased_tag', type='String', description='The slug of the tag this tag is aliased to, if any.', optional=False, api_name='aliased_tag'), Parameter(name='aliases', type='Array', description='The slugs of the tags aliased to this tag.', optional=False, api_name='aliases'), Parameter(name='category', type='String', description='The category class of this tag. One of `"character", "content-fanmade", "content-official", "error", "oc", "origin", "rating", "species", "spoiler"`.', optional=False, api_name='category'), Parameter(name='description', type='String', description='The long description for the tag.', optional=False, api_name='description'), Parameter(name='dnp_entries', type='Array', description='An array of objects containing DNP entries claimed on the tag.', optional=False, api_name='dnp_entries'), Parameter(name='id', type='Integer', description="The tag's ID.", optional=False, api_name='id'), Parameter(name='images', type='Integer', description='The image count of the tag.', optional=False, api_name='images'), Parameter(name='implied_by_tags', type='Array', description='The slugs of the tags this tag is implied by.', optional=False, api_name='implied_by_tags'), Parameter(name='implied_tags', type='Array', description='The slugs of the tags this tag implies.', optional=False, api_name='implied_tags'), Parameter(name='name', type='String', description='The name of the tag.', optional=False, api_name='name'), Parameter(name='name_in_namespace', type='String', description='The name of the tag in its namespace.', optional=False, api_name='name_in_namespace'), Parameter(name='namespace', type='String', description='The namespace of the tag.', optional=False, api_name='namespace'), Parameter(name='short_description', type='String', description='The short description for the tag.', optional=False, api_name='short_description'), Parameter(name='slug', type='String', description='The slug for the tag.', optional=False, api_name='slug'), Parameter(name='spoiler_image_uri', type='String', description='The spoiler image for the tag, or `null` if none provided. ', optional=True, api_name='spoiler_image_uri')]),
	Class(name='User', params=[Parameter(name='id', type='Integer', description='The ID of the user.', optional=False, api_name='id'), Parameter(name='name', type='String', description='The name of the user.', optional=False, api_name='name'), Parameter(name='slug', type='String', description='The slug of the user.', optional=False, api_name='slug'), Parameter(name='role', type='String', description='The role of the user.', optional=False, api_name='role'), Parameter(name='description', type='String', description='The description (bio) of the user.', optional=False, api_name='description'), Parameter(name='avatar_url', type='String', description="The URL of the user's thumbnail. `null` if the avatar is not set.", optional=True, api_name='avatar_url'), Parameter(name='created_at', type='RFC3339 datetime', description='The creation time, in UTC, of the user.', optional=False, api_name='created_at'), Parameter(name='comments_count', type='Integer', description='The comment count of the user.', optional=False, api_name='comments_count'), Parameter(name='uploads_count', type='Integer', description='The upload count of the user.', optional=False, api_name='uploads_count'), Parameter(name='posts_count', type='Integer', description='The forum posts count of the user.', optional=False, api_name='posts_count'), Parameter(name='topics_count', type='Integer', description='The forum topics count of the user.', optional=False, api_name='topics_count'), Parameter(name='links', type='Links', description='`Links`.', optional=False, api_name='links'), Parameter(name='awards', type='Awards', description='`Awards`.', optional=False, api_name='awards')]),
	Class(name='Filter', params=[Parameter(name='id', type='Integer', description='The id of the filter.', optional=False, api_name='id'), Parameter(name='name', type='String', description='The name of the filter.', optional=False, api_name='name'), Parameter(name='description', type='String', description='The description of the filter.', optional=False, api_name='description'), Parameter(name='user_id', type='Integer', description="The id of the user the filter belongs to. `null` if it isn't assigned to a user (usually `system` filters only).", optional=True, api_name='user_id'), Parameter(name='user_count', type='Integer', description='The amount of users employing this filter.', optional=False, api_name='user_count'), Parameter(name='system', type='Boolean', description="If `true`, is a system filter. System filters are usable by anyone and don't have a `user_id` set.", optional=False, api_name='system'), Parameter(name='public', type='Boolean', description='If `true`, is a public filter. Public filters are usable by anyone.', optional=False, api_name='public'), Parameter(name='spoilered_tag_ids', type='Array', description='A list of tag IDs (as integers) that this filter will spoil.', optional=False, api_name='spoilered_tag_ids'), Parameter(name='spoilered_complex', type='String', description='The complex spoiled filter.', optional=False, api_name='spoilered_complex'), Parameter(name='hidden_tag_ids', type='Array', description='A list of tag IDs (as integers) that this filter will hide.', optional=False, api_name='hidden_tag_ids'), Parameter(name='hidden_complex', type='String', description='The complex hidden filter.', optional=False, api_name='hidden_complex')]),
	Class(name='Links', params=[Parameter(name='user_id', type='Integer', description='The ID of the user who owns this link.', optional=False, api_name='user_id'), Parameter(name='created_at', type='RFC3339 datetime', description='The creation time, in UTC, of this link.', optional=False, api_name='created_at'), Parameter(name='state', type='String', description='The state of this link.', optional=False, api_name='state'), Parameter(name='tag_id', type='Integer', description='The ID of an associated tag for this link. `null` if no tag linked.', optional=True, api_name='tag_id')]),
	Class(name='Awards', params=[Parameter(name='image_url', type='String', description='The URL of this award.', optional=False, api_name='image_url'), Parameter(name='title', type='String', description='The title of this award.', optional=False, api_name='title'), Parameter(name='id', type='Integer', description='The ID of the badge this award is derived from.', optional=False, api_name='id'), Parameter(name='label', type='String', description='The label of this award.', optional=False, api_name='label'), Parameter(name='awarded_on', type='RFC3339 datetime', description='The time, in UTC, when this award was given.', optional=False, api_name='awarded_on')]),
	Class(name='Gallery', params=[Parameter(name='description', type='String', description="The gallery's description.", optional=False, api_name='description'), Parameter(name='id', type='Integer', description="The gallery's ID.", optional=False, api_name='id'), Parameter(name='spoiler_warning', type='String', description="The gallery's spoiler warning.", optional=False, api_name='spoiler_warning'), Parameter(name='thumbnail_id', type='Integer', description='The ID of the cover image for the gallery.', optional=False, api_name='thumbnail_id'), Parameter(name='title', type='String', description="The gallery's title.", optional=False, api_name='title'), Parameter(name='user', type='String', description="The name of the gallery's creator.", optional=False, api_name='user'), Parameter(name='user_id', type='Integer', description="The ID of the gallery's creator.", optional=False, api_name='user_id')]),
	Class(name='ImageErrors', params=[Parameter(name='image', type='Array', description='Errors in the submitted image', optional=False, api_name='image'), Parameter(name='image_aspect_ratio', type='Array', description='Errors in the submitted image', optional=False, api_name='image_aspect_ratio'), Parameter(name='image_format', type='Array', description='When an image is unsupported (ex. WEBP)', optional=False, api_name='image_format'), Parameter(name='image_height', type='Array', description='Errors in the submitted image', optional=False, api_name='image_height'), Parameter(name='image_width', type='Array', description='Errors in the submitted image', optional=False, api_name='image_width'), Parameter(name='image_size', type='Array', description='Usually if an image that is too large is uploaded.', optional=False, api_name='image_size'), Parameter(name='image_is_animated', type='Array', description='Errors in the submitted image', optional=False, api_name='image_is_animated'), Parameter(name='image_mime_type', type='Array', description='Errors in the submitted image', optional=False, api_name='image_mime_type'), Parameter(name='image_orig_sha512_hash', type='Array', description='Errors in the submitted image. If **has already been taken** is present, means the image already exists in the database.', optional=False, api_name='image_orig_sha512_hash'), Parameter(name='image_sha512_hash', type='Array', description='Errors in the submitted image', optional=False, api_name='image_sha512_hash'), Parameter(name='tag_input', type='Array', description='Errors with the tag metadata.', optional=False, api_name='tag_input'), Parameter(name='uploaded_image', type='Array', description='Errors in the submitted image', optional=False, api_name='uploaded_image')]),
	Class(name='Oembed', params=[Parameter(name='author_name', type='String', description='The comma-delimited names of the image authors.', optional=False, api_name='author_name'), Parameter(name='author_url', type='String', description='The source URL of the image.', optional=False, api_name='author_url'), Parameter(name='cache_age', type='Integer', description='Always `7200`.', optional=False, api_name='cache_age'), Parameter(name='derpibooru_comments', type='Integer', description='The number of comments made on the image.', optional=False, api_name='derpibooru_comments'), Parameter(name='derpibooru_id', type='Integer', description="The image's ID.", optional=False, api_name='derpibooru_id'), Parameter(name='derpibooru_score', type='Integer', description="The image's number of upvotes minus the image's number of downvotes.", optional=False, api_name='derpibooru_score'), Parameter(name='derpibooru_tags', type='Array', description="The names of the image's tags.", optional=False, api_name='derpibooru_tags'), Parameter(name='provider_name', type='String', description='Always `"Derpibooru"`.', optional=False, api_name='provider_name'), Parameter(name='provider_url', type='String', description='Always `"https://derpibooru.org"`.', optional=False, api_name='provider_url'), Parameter(name='title', type='String', description="The image's ID and associated tags, as would be given on the title of the image page.", optional=False, api_name='title'), Parameter(name='type', type='String', description='Always `"photo"`.', optional=False, api_name='type'), Parameter(name='version', type='String', description='Always `"1.0"`.', optional=False, api_name='version')]),
]
